name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main
  schedule:
  - cron: "0 2 * * 1" # at 02:00 on Monday

jobs:
  build-maven:
    name: Build Maven projects
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5.0.0

    - name: Setup Java and Maven cache
      uses: actions/setup-java@v5.0.0
      with:
        distribution: 'temurin'
        java-version: '21'
        check-latest: true
        cache: 'maven'

    - name: Build projects
      working-directory: lang
      run: >
        ./mvnw clean verify
        --batch-mode
        --fail-at-end
        --update-snapshots
        --no-transfer-progress

    - name: Stage build results
      if: matrix.os == 'ubuntu-latest'
      run: mkdir staging && find . -path '*/target/*.jar' -exec cp {} staging/ \;

    - name: Upload build results
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: build-results-maven
        path: staging/

  build-vscode-extension:
    name: Build VSCode extension
    runs-on: ubuntu-latest
    needs: [build-maven]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5.0.0

    - name: Download Maven build results
      uses: actions/download-artifact@v5
      with:
        name: build-results-maven
        path: build-results-maven

    - name: Extract IDE package
      run: cp build-results-maven/tools.vitruv.neojoin.frontend.ide.jar vscode-plugin/

    - name: Setup node
      uses: actions/setup-node@v6
      with:
        node-version: 20
        check-latest: true
        cache: npm
        cache-dependency-path: vscode-plugin/package-lock.json

    - name: Install dependencies
      working-directory: vscode-plugin
      run: npm clean-install

    - name: Package extension
      working-directory: vscode-plugin
      run: npx @vscode/vsce package

    - name: Stage build results
      run: mkdir staging && cp vscode-plugin/*.vsix staging/;

    - name: Upload build results
      uses: actions/upload-artifact@v4
      with:
        name: build-results-vscode
        path: staging/

  sonar:
    name: SonarQube scan of Maven projects
    if: github.event_name == 'schedule' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]')
    runs-on: ubuntu-latest
    needs: [build-maven]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5.0.0
      with:
        fetch-depth: 0

    - name: Setup Java and Maven cache
      uses: actions/setup-java@v5.0.0
      with:
        distribution: 'temurin'
        java-version: '21'
        check-latest: true
        cache: 'maven'

    - name: Setup SonarQube cache
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Analyze projects
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      working-directory: lang
      run: >
        ./mvnw clean verify sonar:sonar -P coverage
        --batch-mode
        --update-snapshots
        --no-transfer-progress
        -Dsonar.projectKey=vitruv-tools_NeoJoin
